---------------------------------------------------------------------

a. Опишите проблематику, в которой необходим паттерн наблюдатель.

    Паттерн "Наблюдатель" (Observer) — это поведенческий шаблон проектирования,
    который определяет зависимость "один ко многим" между объектами.
    Когда состояние одного объекта изменяется, 
    все зависимые от него объекты автоматически уведомляются и обновляются.

    Паттерн наблюдатель применяется, когда есть объект (наблюдаемый),
     состояние которого должно быть отслеживаемо и синхронизируемо
      с другими объектами (наблюдателями). Проблематика возникает,
       когда:

    1. Есть необходимость уведомлять сразу несколько
     объектов об изменениях в наблюдаемом объекте.
    2. Требуется минимизировать прямые зависимости между объектами,
     обеспечивая слабую связанность.
    3. Пример: в GUI приложении несколько окон 
    или элементов интерфейса должны обновляться
     при изменении данных в модели
      (например, обновление таблицы в ответ на изменение данных в базе).

    Вместо вызова метода update_view() вручную из контроллера после изменений: 
    можно сделать MainView наблюдателем, а ClientRepositorySQLite — наблюдаемым.
     Тогда ClientRepositorySQLite будет автоматически уведомлять MainView об изменениях.
---------------------------------------------------------------------

b. MVC. Общий подход. Пример диаграммы последовательности реализации операции CRUD - read.

    Модель-Вид-Контроллер (MVC) — это архитектурный шаблон, разделяющий логику приложения на три части:

    1. Модель (Model): управляет данными, бизнес-логикой и правилами приложения.
    2. Вид (View): отвечает за отображение данных и пользовательский интерфейс.
    3. Контроллер (Controller): обрабатывает пользовательский ввод,
     взаимодействует с моделью и обновляет представление.
    
    Диаграмма последовательности для операции CRUD (Read):

    1. Пользователь нажимает на кнопку (например, "Обновить").
    2. Представление вызывает метод контроллера update_view().
    3. Контроллер вызывает метод модели get_all_clients().
    4. Модель возвращает данные.
    5. Контроллер передает данные в представление для обновления таблицы.  

---------------------------------------------------------------------

c. Опишите место в проекте, где возможно применение данного паттерна наблюдатель,
 опишите вашу реализацию паттерна адаптер. Что есть стратегия в MVC?

    Паттерн "Наблюдатель":
    - Используется в моём проекте для синхронизации таблицы в `MainView`
     с данными в `ClientRepository`. При изменении данных (добавление, удаление, редактировании),
      модель уведомляет контроллер, а тот обновляет представление.

    Паттерн "Адаптер":
    Метод get_client_by_id нужен для преобразования данных,
     полученных из базы (строка с полями),
      в удобный формат (список или словарь),
       который используется в ClientInfoView для отображения информации.
        Это делает код более читабельным и упрощает работу с данными в представлении.

    Стратегия в MVC:
    - В MVC стратегия часто применяется в виде 
    динамического выбора алгоритмов 
    (например, разные стратегии сортировки данных в таблице).

    метод sort_table может использовать
     стратегию для изменения логики сортировки
      (по имени, телефону и т.д.).

    Паттерн стратегия делает код более гибким,
     позволяет добавлять новые 
     алгоритмы (сортировки, фильтрации)
      без изменения существующего кода,
       что улучшает расширяемость.

---------------------------------------------------------------------

d. Напишите схему реализации паттерна наблюдатель.

    1. Observable (наблюдаемый):
    - Сохраняет список наблюдателей.
    - Уведомляет наблюдателей об изменении состояния.

    2. Observer (наблюдатель):
    - Интерфейс или абстрактный класс с методом `update`.

    3. Пример:
    class Observable:
        def __init__(self):
            self._observers = []

        def add_observer(self, observer):
            self._observers.append(observer)

        def notify_observers(self):
            for observer in self._observers:
                observer.update()

    class Observer:
        def update(self):
            raise NotImplementedError
    ```

---------------------------------------------------------------------

e. В каком случае рекомендуется применять паттерн Фабрика?
    Фабрика рекомендуется, 
    если в вашем проекте есть несколько типов объектов, 
    создание которых требует различной логики. 

    Например, если у вас есть два типа клиентов: 
    физическое лицо и юридическое лицо, 
    фабрика может создавать нужный тип клиента в зависимости 
    от входящих данных.

---------------------------------------------------------------------

f. Пример реализации паттерна Фабрика.

    class ClientFactory:
    @staticmethod
    def create_client(client_type, **kwargs):
        if client_type == "individual":
            return IndividualClient(**kwargs)
        elif client_type == "corporate":
            return CorporateClient(**kwargs)
    
    client = ClientFactory.create_client("individual", fio="Иван Иванов", phone="+7 (999) 123-45-67")
    self.model.add_client(client)

---------------------------------------------------------------------