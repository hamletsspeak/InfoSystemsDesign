---------------------------------------------------------------------

a. Опишите проблематику, в которой необходим паттерн наблюдатель.
    Паттерн "Наблюдатель" необходим, когда одна сущность должна автоматически уведомлять множество зависимых объектов о своем состоянии.
    Это важно для обеспечения согласованности между объектами, избегая жесткой связи между ними.

    Пример: 
    - В графическом приложении модель уведомляет представление об изменении данных, чтобы обновить интерфейс.

---------------------------------------------------------------------

b. MVC. Общий подход. Пример диаграммы последовательности реализации операции CRUD - read.

    MVC (Model-View-Controller):
    - Model: управляет данными и бизнес-логикой.
    - View: отображает данные пользователю.
    - Controller: обрабатывает действия пользователя и взаимодействует с моделью.

    Пример диаграммы последовательности для CRUD (read):
    1. Пользователь вызывает действие (например, запрос данных).
    2. Контроллер вызывает метод модели для получения данных.
    3. Модель возвращает данные в контроллер.
    4. Контроллер обновляет представление.

---------------------------------------------------------------------

c. Опишите место в проекте, где возможно применение данного паттерна наблюдатель, опишите вашу реализацию паттерна адаптер. Что есть стратегия в MVC?

    Паттерн "Наблюдатель":
    - Используется в вашем проекте для синхронизации таблицы в `MainView` с данными в `ClientRepository`. При изменении данных (добавление, удаление), модель уведомляет контроллер, а тот обновляет представление.

    Паттерн "Адаптер":
    - Может применяться для преобразования формата данных из базы данных (например, `sqlite3`) в объекты, удобные для интерфейса.

    Стратегия в MVC:
    - В MVC стратегия часто применяется в виде динамического выбора алгоритмов (например, разные стратегии сортировки данных в таблице).

---------------------------------------------------------------------

d. Напишите схему реализации паттерна наблюдатель.

    1. Observable (наблюдаемый):
    - Сохраняет список наблюдателей.
    - Уведомляет наблюдателей об изменении состояния.

    2. Observer (наблюдатель):
    - Интерфейс или абстрактный класс с методом `update`.

    3. Пример:
    ```python
    class Observable:
        def __init__(self):
            self._observers = []

        def add_observer(self, observer):
            self._observers.append(observer)

        def notify_observers(self):
            for observer in self._observers:
                observer.update()

    class Observer:
        def update(self):
            raise NotImplementedError
    ```

---------------------------------------------------------------------

e. В каком случае рекомендуется применять паттерн Фабрика?
    Паттерн "Фабрика" используется, когда нужно создавать объекты, но тип объекта определяется в процессе выполнения программы. Это позволяет изолировать код создания объектов от их использования.

    Пример:
    - Создание разных объектов соединения с базой данных (SQLite, PostgreSQL) в зависимости от конфигурации.

---------------------------------------------------------------------

f. Пример реализации паттерна Фабрика.

    class DatabaseFactory:
        @staticmethod
        def get_database(db_type):
            if db_type == "sqlite":
                return SQLiteDatabase()
            elif db_type == "postgresql":
                return PostgreSQLDatabase()
            else:
                raise ValueError("Unknown database type")

    class SQLiteDatabase:
        def connect(self):
            print("Connecting to SQLite")

    class PostgreSQLDatabase:
        def connect(self):
            print("Connecting to PostgreSQL")

    # Использование
    db = DatabaseFactory.get_database("sqlite")
    db.connect()  # Connecting to SQLite

---------------------------------------------------------------------